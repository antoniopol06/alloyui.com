---
api: ButtonBase
target: developer
layout: single-doc
title: Create Buttons
tags: button
type: module
category: Guide
description: If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it!
---

For example, if you want to add a button that creates links to share content to Facebook, create a React class, let's say ButtonFacebook and load it on the page.
Then, add it to the configuration of the toolbar, like this:

````javascript
buttons: ['styles', 'bold', 'italic', 'underline', 'link', 'twitter', 'facebook']
````

Of course, the buttons accept configuration parameters, so you can do this with your button:

````javascript
var buttons = [
    'styles', 'bold', 'italic', 'underline', 'link', 'twitter',
    {
        name: 'facebook',
        cfg: {
            href: 'www.alloyeditor.com',
            layout: 'icon_link'
        }
    }
];
````

#### Full example of creating a new button.
Here is an example how can you create a button which converts the current selection into a marquee:

````javascript
var ButtonMarquee = React.createClass({
    mixins: [AlloyEditor.ButtonStyle, AlloyEditor.ButtonStateClasses, AlloyEditor.ButtonActionStyle],

    propTypes: {
        editor: React.PropTypes.object.isRequired
    },

    getDefaultProps: function() {
        return {
            style: {
                element: 'marquee'
            }
        };
    },

    statics: {
        key: 'marquee'
    },

    render: function() {
        var cssClass = 'alloy-editor-button ' + this.getStateClasses();

        return (
            <button className={cssClass} data-type="button-marquee" onClick={this.applyStyle} tabIndex={this.props.tabIndex}>
                <span className="alloy-editor-icon-separator"></span>
            </button>
        );
    }
});

AlloyEditor.Buttons[ButtonMarquee.key] = AlloyEditor.ButtonMarquee = ButtonMarquee;
````

Then, you have to add it to the configuration of the Toolbar where you want to use it. Buttons, which handle styles are usually used within the Styles Toolbar, inside a text-like selection:
````javascript
var toolbars = [
    styles: {
        selections: [{
            name: 'text',
            buttons: ['styles', 'bold', 'italic', 'underline', 'link', 'twitter', 'marquee'],
            test: AlloyEditor.SelectionTest.text
        }],
        tabIndex: 1
    }
]
````

In this case the Marquee button will appear after Twitter one, last on the toolbar.

If course, the JavaScript file, which contains the code of the button, should be added on the page. You have two options here; add another ```` <script> ```` element, or join this file among your other files.