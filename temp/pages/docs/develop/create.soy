
{namespace docsDevelopCreateHtml}

/**
 *
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			<h6>How to create your buttons, skins, toolbars and UI!</h6>
<article id="article1">
<h2>Create Buttons</h2>
<p>
If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it!
</p>
<p><i>Please, check our <a href="/docs/develop/create/create_buttons.html">Create Buttons Guide</a>!</i></p>
</article>
<article id="article2">
<h2>Create Skins</h2>
<p>
AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin.
</p>
<p><i>Please, check our <a href="/docs/develop/create/create_skin.html">Create Skins Guide</a>!</i></p>
</article>
<article id="article3">
<h2>Create Toolbars</h2>
<p>
Adding a new toolbar is also as straightforward as adding a button.
</p>
<p><i>Please, check our <a href="/docs/develop/create/create_toolbars.html">Create Toolbars Guide</a>!</i></p>
</article>
<article id="article4">
<h2>Create UI</h2>
<p>
You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor.
</p>
<p><i>Please, check our <a href="/docs/develop/create.html">Create Toolbars Guide</a>!</i></p>
</article>
		{/param}
	{/call}
{/template}
